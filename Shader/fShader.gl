#version 330 core

in vec3 v_norm;
in vec3 v_point;
in vec2 v_textCoord;

//in vec3 gl_Position;

layout(location = 0) out vec4 o_color;
uniform sampler2D texture1;
uniform sampler2D texture2;

void main()
{
	float rar = 0.5;
	vec4 tex1Color = texture(texture1,v_textCoord);
	vec4 tex2Color = texture(texture2,v_textCoord);
	
	vec4 res = rar * tex1Color + (1-rar) * tex2Color;
	//vec4 res = tex1Color ;
	//vec4 res = tex2Color;

	vec3 ambientColor = vec3(80.0/255,200.0/255,120.0/255);//окружающее освещение
	
    
	vec3 light =  vec3(2.0,2.0,-7.0)/*позиция света*/ - v_point/*позиция глаз*/;
	light = normalize(light);
	vec3 normal=normalize(v_norm);
	//vec3 v=normalize(v_point);
	//vec3 r = reflect(-v,normal);	
	//vec3 spec = vec3(0.9) * pow(max(dot(l,r),0.0),5.0);
	float for_dif = dot(normal,light);
	for_dif = max(for_dif,0.0);
	vec3 diffColor = for_dif*vec3(1.0,0.0,0.0);//диффузное освещение
	//
	vec3 viewDir =  vec3(0.0)- v_point;
	viewDir = normalize(viewDir);
	vec3 reflectDir = reflect(-light,normal);
	//vec3 halfDir = normalize(light+viewDir);
	//float spec = dot(halfDir, normalize(v_norm));
	
	float spec = dot(viewDir,reflectDir);
	spec=spec *  step (0.1,dot(viewDir, normalize(v_norm)));
	spec = max(spec,0.0);
	
	//float spec = dot(light, reflectDir);
	//spec = max(spec,0.0);
	vec3 specColor = pow(spec,25.0) * vec3(0.9);//зеркальный блик	
	
	//vec3 resultColor = (ambientColor + specColor + diffColor) * tex1Color;	
	//o_color = vec4(resultColor, 1.0);
	//o_color =vec4(vec3(ambientColor + specColor + diffColor),1.0) *res;
	o_color =res;
}
